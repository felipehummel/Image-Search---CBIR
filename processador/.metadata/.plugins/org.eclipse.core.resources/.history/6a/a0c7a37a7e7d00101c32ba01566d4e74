import java.util.concurrent.Callable;


public class ShardProcessor implements Callable<ImageScore[]>{
	private final int[] query_feature_array;
	private final int[] keys;
	private final int start;
	private final int end;
	public ShardProcessor(int[] _query_feature_array, int[] _keys, int _start, int _end) {
		query_feature_array = _query_feature_array;
		keys = _keys;
		start = _start;
		end = _end;
	}
	
	@Override
	public ImageScore[] call() throws Exception {
		int id;
		int[] feature_array;
		float score;
		HitQueue pq = new HitQueue(10, true);
        ImageScore pqTop = pq.top();
		for (int i = start; i <= end; i++) {
			id = keys[i];
			feature_array = images.get(id);
			score = similarity.calculateSimilarity(feature_array, query_feature_array);
			if (score > pqTop.score) {
        		pqTop.id = id;
                pqTop.score = score;
                pqTop = pq.updateTop();
        	}
		}
		ImageScore[] results = getResults(pq);
		return results;
	}

}
